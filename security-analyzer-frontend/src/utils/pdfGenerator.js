import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { formatTimestamp, getThreatStatistics } from './threatHistory';

export const generateCurrentAnalysisPDF = async (analysisItem, logInput) => {
  try {
    const tempDiv = document.createElement('div');
    tempDiv.style.position = 'absolute';
    tempDiv.style.left = '-9999px';
    tempDiv.style.width = '800px';
    tempDiv.style.backgroundColor = 'white';
    tempDiv.style.padding = '20px';
    
    const url = analysisItem.analysis.mitre_attck_url || analysisItem.analysis['mitre_att&ck_url'] || '';
    const threatLevel = analysisItem.analysis.threat_score <= 30 ? 'Low' : 
                       analysisItem.analysis.threat_score <= 60 ? 'Medium' : 'High';
    const scoreColor = analysisItem.analysis.threat_score <= 30 ? '#10b981' : 
                       analysisItem.analysis.threat_score <= 60 ? '#f59e0b' : '#ef4444';
    
    tempDiv.innerHTML = `
      <div style="font-family: Arial, sans-serif; color: #333; line-height: 1.6;">
        <h1 style="color: #1f2937; border-bottom: 2px solid #e5e7eb; padding-bottom: 10px; margin-bottom: 20px;">
          Security Threat Analysis Report
        </h1>
        
        <div style="margin: 20px 0; padding: 15px; background: #f9fafb; border-left: 4px solid #3b82f6; border-radius: 8px;">
          <h2 style="margin: 0 0 10px 0; color: #1f2937;">Threat Assessment</h2>
          <p style="font-size: 18px; margin: 5px 0;">
            <strong>Threat Score:</strong> 
            <span style="color: ${scoreColor}; font-weight: bold;">${analysisItem.analysis.threat_score}/100</span>
          </p>
          <p style="margin: 5px 0;"><strong>Threat Level:</strong> ${threatLevel}</p>
          <p style="margin: 5px 0; font-size: 12px; color: #6b7280;">
            Generated: ${new Date().toLocaleString()}
          </p>
        </div>
        
        <div style="margin: 20px 0;">
          <h3 style="color: #1f2937; margin-bottom: 10px;">Security Event Log</h3>
          <div style="background: #f3f4f6; padding: 15px; border-radius: 8px; font-family: monospace; font-size: 12px; white-space: pre-wrap;">
${logInput}
          </div>
        </div>
        
        <div style="margin: 20px 0;">
          <h3 style="color: #1f2937; margin-bottom: 10px;">Root Cause Analysis</h3>
          <p style="line-height: 1.6;">${analysisItem.analysis.cause}</p>
        </div>
        
        <div style="margin: 20px 0;">
          <h3 style="color: #1f2937; margin-bottom: 10px;">Recommended Remedy</h3>
          <p style="line-height: 1.6;">${analysisItem.analysis.remedy}</p>
        </div>
        
        <div style="margin: 20px 0;">
          <h3 style="color: #1f2937; margin-bottom: 10px;">MITRE ATT&CK Technique</h3>
          <p style="line-height: 1.6; font-weight: bold;">${analysisItem.analysis.mitre_technique}</p>
          ${url ? `<p style="color: #3b82f6; font-size: 12px; margin-top: 5px;">${url}</p>` : ''}
        </div>
        
        <div style="margin: 20px 0;">
          <h3 style="color: #1f2937; margin-bottom: 10px;">Recommended Approach</h3>
          <ol style="line-height: 1.8; padding-left: 20px;">
            ${Array.isArray(analysisItem.analysis.approach) ? 
              analysisItem.analysis.approach.map(step => `<li style="margin-bottom: 5px;">${step}</li>`).join('') :
              `<li>${analysisItem.analysis.approach}</li>`
            }
          </ol>
        </div>
        
        <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 10px; color: #6b7280;">
          <p>Generated by Security Event Analyzer - Powered by n8n AI Workflow</p>
          <p>Report ID: ${analysisItem.id}</p>
        </div>
      </div>
    `;
    
    document.body.appendChild(tempDiv);
    
    const canvas = await html2canvas(tempDiv, {
      scale: 2,
      backgroundColor: '#ffffff',
      width: 800,
      height: tempDiv.scrollHeight
    });
    
    document.body.removeChild(tempDiv);
    
    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF({
      orientation: 'portrait',
      unit: 'mm',
      format: 'a4'
    });
    
    const imgWidth = 210;
    const pageHeight = 295;
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    let heightLeft = imgHeight;
    let position = 0;
    
    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
    heightLeft -= pageHeight;
    
    while (heightLeft >= 0) {
      position = heightLeft - imgHeight;
      pdf.addPage();
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
    }
    
    const timestamp = new Date().toISOString().split('T')[0];
    pdf.save(`security-analysis-${timestamp}-${Date.now()}.pdf`);
    
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF report');
  }
};

export const generateFullReportPDF = async (history) => {
  if (history.length === 0) {
    throw new Error('No data available for summary report');
  }
  
  const stats = getThreatStatistics(history);
  const pdf = new jsPDF();
  
  pdf.setFontSize(24);
  pdf.setTextColor(40, 40, 40);
  pdf.text('Security Threat Analysis', 20, 40);
  pdf.text('Comprehensive Report', 20, 55);
  
  pdf.setFontSize(14);
  pdf.setTextColor(100, 100, 100);
  pdf.text(`Generated: ${new Date().toLocaleString()}`, 20, 75);
  pdf.text(`Total Events: ${stats.total}`, 20, 85);
  
  pdf.setFontSize(16);
  pdf.setTextColor(40, 40, 40);
  pdf.text('Executive Summary', 20, 110);
  
  pdf.setFontSize(12);
  pdf.text(`Average Threat Score: ${stats.averageScore}/100`, 30, 125);
  pdf.text(`High Severity: ${stats.highThreats} (${Math.round((stats.highThreats / stats.total) * 100)}%)`, 30, 135);
  pdf.text(`Medium Severity: ${stats.mediumThreats} (${Math.round((stats.mediumThreats / stats.total) * 100)}%)`, 30, 145);
  pdf.text(`Low Severity: ${stats.lowThreats} (${Math.round((stats.lowThreats / stats.total) * 100)}%)`, 30, 155);
  
  if (stats.topTechniques.length > 0) {
    pdf.text('Top Attack Techniques:', 20, 175);
    stats.topTechniques.slice(0, 5).forEach((technique, index) => {
      pdf.text(`${index + 1}. ${technique.technique} - ${technique.count} occurrences`, 30, 185 + (index * 8));
    });
  }
  
  const timestamp = new Date().toISOString().split('T')[0];
  pdf.save(`security-summary-report-${timestamp}.pdf`);
};
